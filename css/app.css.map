{"version":3,"file":"app.css","sources":["app.scss","_depends.scss","external/_angled-edges.scss","_variables.scss","functions/_tilted.scss","mixins/_tilted.scss","layout/_index.scss","blocks/_header.scss","blocks/_main.scss","blocks/_pre-footer.scss","blocks/_footer.scss","elements/_header.scss","elements/_section.scss","elements/_skews.scss"],"sourcesContent":["@import \"depends\";","/* External resources */\r\n\r\n@import \"external/angled-edges\";\r\n\r\n/* Variables */\r\n@import \"variables\";\r\n\r\n/* Functions */\r\n@import \"functions/tilted\";\r\n\r\n/* Mixins */\r\n\r\n@import \"mixins/tilted\";\r\n\r\n/* Layouts */\r\n@import \"layout/index\";\r\n\r\n/* Blocks */\r\n@import \"blocks/header\";\r\n@import \"blocks/main\";\r\n@import \"blocks/pre-footer\";\r\n@import \"blocks/footer\";\r\n\r\n/* Elements */\r\n@import \"elements/header\";\r\n@import \"elements/section\";\r\n@import \"elements/skews\";","//-------------------------------------------------------------------------------------\n// Angled Edges v1.1.2 (https://github.com/josephfusco/angled-edges)\n// Copyright 2016 Joseph Fusco\n// Licensed under MIT (https://github.com/josephfusco/angled-edges/blob/master/LICENSE)\n//-------------------------------------------------------------------------------------\n\n/// Replace `$search` with `$replace` in `$string`\n///\n/// @author Hugo Giraudel\n/// @link   http://www.sassmeister.com/gist/1b4f2da5527830088e4d\n///\n/// @param  {String}  $string - Initial string\n/// @param  {String}  $search - Substring to replace\n/// @param  {String}  $replace ('') - New value\n/// @return {String}  Updated string\n///\n@function ae-str-replace($string, $search, $replace: '') {\n\t$index: str-index($string, $search);\n\n\t@if $index {\n\t\t@return str-slice($string, 1, $index - 1) + $replace + ae-str-replace(str-slice($string, $index + str-length($search)), $search, $replace);\n\t}\n\n\t@return $string;\n}\n\n/// Encode SVG to use as background\n///\n/// @param  {String}  $string\n/// @return {String}  Encoded svg data\n///\n@function ae-svg-encode($string){\n\t$result: ae-str-replace($string, '<svg', '<svg xmlns=\"http://www.w3.org/2000/svg\"');\n\t$result: ae-str-replace($result, '%', '%25');\n\t$result: ae-str-replace($result, '\"', '\\'');\n\t$result: ae-str-replace($result, '<', '%3C');\n\t$result: ae-str-replace($result, '>', '%3E');\n\n\t@return 'data:image/svg+xml,' + $result;\n}\n\n/// Outputs pseudo content for main mixin\n///\n/// @author Joseph Fusco\n///\n/// @param  {String}  $location\n/// @param  {Number}  $height\n/// @output psuedo content\n///\n@mixin ae-pseudo($wedge, $height) {\n\tbackground-image: url($wedge);\n\tbackground-position: center center;\n\tbackground-repeat: no-repeat;\n\tcontent: '';\n\theight: $height * 1px;\n\tleft: 0;\n\tposition: absolute;\n\tright: 0;\n\twidth: 100%;\n\tz-index: 1;\n}\n\n/// Attatches an svg wedge shape to an element\n///\n/// @author Joseph Fusco\n///\n/// @param  {String}  $location   - 'inside top', 'outside top', 'inside bottom', 'outside bottom'\n/// @param  {String}  $hypotenuse - 'upper left', 'upper right', 'lower left', 'lower right'\n/// @param  {Color}   $fill\n/// @param  {Number}  $width\n/// @param  {Number}  $height\n/// @output '::before' and/or '::after' with svg background image\n///\n@mixin angled-edge($location, $hypotenuse, $fill, $width: 2800, $height: 100) {\n\n\tposition: relative;\n\n\t// polygon points for right triangle\n\t$points: (\n\t\t'upper left': '0,#{$height} #{$width},#{$height} #{$width},0',\n\t\t'upper right': '0,#{$height} #{$width},#{$height} 0,0',\n\t\t'lower left': '0,0 #{$width},#{$height} #{$width},0',\n\t\t'lower right': '0,0 #{$width},0 0,#{$height}'\n\t);\n\n\t// ensure $fill color is using rgb()\n\t$fill-rgb: 'rgb(' + round(red($fill)) + ',' + round(green($fill)) + ',' + round(blue($fill)) + ')';\n\n\t// capture alpha component of $fill to use with fill-opacity\n\t$fill-alpha: alpha($fill);\n\n\t$wedge: ae-svg-encode('<svg height=\"#{$height}\" width=\"#{$width}\" fill=\"#{$fill-rgb}\" fill-opacity=\"#{$fill-alpha}\"><polygon points=\"#{map-get($points, $hypotenuse)}\"></polygon></svg>');\n\n\t@if ($location == 'inside top') {\n\t\t&::before {\n\t\t\t@include ae-pseudo($wedge, $height);\n\t\t\ttop: 0;\n\t\t}\n\t} @else if ($location == 'outside top') {\n\t\t&::before {\n\t\t\t@include ae-pseudo($wedge, $height);\n\t\t\ttop: -$height * 1px;\n\t\t}\n\t} @else if ($location == 'inside bottom') {\n\t\t&::after {\n\t\t\t@include ae-pseudo($wedge, $height);\n\t\t\tbottom: 0;\n\t\t}\n\t} @else if ($location == 'outside bottom') {\n\t\t&::after {\n\t\t\t@include ae-pseudo($wedge, $height);\n\t\t\tbottom: -$height * 1px;\n\t\t}\n\t} @else {\n\t\t@error 'Invalid argument for $location - must use: `inside top`, `outside top`, `inside bottom`, `outside bottom`';\n\t}\n\n\t@if (map-has-key($points, $hypotenuse) == false) {\n\t\t@error 'Invalid argument for $hypotenuse - must use: `upper left`, `upper right`, `lower left`, `lower right`';\n\t}\n}\n","/* hexa colours */\r\n$white: #fff;\r\n$black: #000;\r\n$red: #f00;\r\n\r\n/* rgba colours  */\r\n\r\n\r\n/* misc */\r\n$fix: fixed;\r\n$a: auto;\r\n$n: none;\r\n$h: hidden;\r\n\r\n\r\n/* flexboxes */\r\n$sp-a: space-around;\r\n$sp-b: space-between;\r\n","\r\n@function pi() {\r\n  @return 3.1415926535897932384626433832795028841971693993751;\r\n}\r\n\r\n@function fact($number) {\r\n  $value: 1;\r\n\r\n  @if $number > 0 {\r\n    @for $i from 1 through $number {\r\n      $value: $value * $i;\r\n    }\r\n  }\r\n\r\n  @return $value;\r\n}\r\n\r\n@function pow($number, $exp) {\r\n  $value: 1;\r\n\r\n  @if $exp > 0 {\r\n    @for $i from 1 through $exp {\r\n      $value: $value * $number;\r\n    }\r\n  } @else if $exp < 0 {\r\n    @for $i from 1 through -$exp {\r\n      $value: $value / $number;\r\n    }\r\n  }\r\n\r\n  @return $value;\r\n}\r\n\r\n@function sin($angle) {\r\n  $sin: 0;\r\n  $rad: $angle * pi() * 1rad / 180deg;\r\n  $angle: $rad / ($rad * 0 + 1);\r\n\r\n  @for $i from 0 through 10 {\r\n    $sin: $sin + pow(-1, $i) * pow($angle, (2 * $i + 1)) / fact(2 * $i + 1);\r\n  }\r\n\r\n  @return $sin;\r\n}\r\n\r\n@function sqrt($number) {\r\n  $guess: 4; // Guaranteed to be random: http://xkcd.com/221/\r\n  $root: $guess;\r\n\r\n  @for $i from 1 through 50 {\r\n    $root: $root - (pow($root, 2) - $number) / (2 * $root);\r\n  }\r\n\r\n  @return $root;\r\n}\r\n\r\n@function get-tilted-height($angle) {\r\n  $a: (100% / 1%);\r\n  $A: (90deg - $angle);\r\n  $c: ($a / sin($A));\r\n  $b: sqrt(pow($c, 2) - pow($a, 2));\r\n\r\n  @return (abs($b) * 1%);\r\n}","@mixin tilted($angle, $color) {\r\n    $height: get-tilted-height($angle);\r\n\r\n    position: relative;\r\n    background-color: $color;\r\n\r\n    &::before {\r\n        background-color: inherit;\r\n        content: '';\r\n        padding-top: $height;\r\n        position: absolute;\r\n        left: 0;\r\n        right: 0;\r\n        top: 0;\r\n        transform: translateY(-50%) skewY($angle);\r\n        z-index: -1;\r\n    }\r\n\r\n    &::after {\r\n        background-color: inherit;\r\n        content: '';\r\n        padding-top: $height;\r\n        position: absolute;\r\n        left: 0;\r\n        right: 0;\r\n        bottom: 0;\r\n        transform: translateY(50%) skewY($angle);  \r\n        z-index: -1;\r\n    }\r\n}","html {\r\n    font-size: 10px;\r\n}","header {\r\n    background-color: rgba(255, 0, 0, .9);\r\n    width: 100%;\r\n    height: 80px;\r\n    color: $white;\r\n    position: $fix;\r\n    top: 0px;\r\n    z-index: 200;\r\n    align-items: center;\r\n}\r\n\r\n.header-wrapper {\r\n    width: 80%;\r\n    display: flex;\r\n    justify-content: $sp-b;\r\n    position: relative;\r\n    margin: 0 $a;\r\n}\r\n\r\n.header-wrapper h1 {\r\n    margin: 3rem 6rem;\r\n}\r\n\r\n.header-wrapper nav {\r\n    display: flex;\r\n    width: 50%;\r\n    font-size: 2.1rem;\r\n    margin: 25px 0;\r\n    margin-right: 4rem;\r\n    justify-content: $sp-a;    \r\n}\r\n\r\n.header-wrapper a {\r\n    color: $white;\r\n    text-decoration: $n;\r\n    margin-left: 20px;\r\n}","",".pre-footer {\r\n    @include tilted(5deg, rgb(255, 0, 0));\r\n    height: 250px;\r\n}","","","section {    \r\n    height: 480px;\r\n    width: 100%;\r\n    background-color: $black;\r\n    margin: 400px 0;\r\n    color: white;\r\n}\r\n\r\nsection h2 {\r\n    font-size: 2.3rem;\r\n    text-align: center;\r\n    padding-top: 2.5rem;\r\n}\r\n\r\nsection p {\r\n    font-size: 1.2rem;\r\n}",".skew-left {\r\n    @include angled-edge('outside top', 'upper left', $black, 1950, 160);\r\n    @include angled-edge('outside bottom', 'lower right', $black, 1950, 160);\r\n}\r\n\r\n.skew-right {\r\n    @include angled-edge('outside top', 'upper right', $black, 1950, 160);\r\n    @include angled-edge('outside bottom', 'lower left', $black, 1950, 160);\r\n}\r\n"],"mappings":"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","names":[]}